{
  "categorizedComponents": [
    {
      "components": [
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Icon",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Icon/Icon.js"
            },
            "presets": [
              {
                "path": "src/Icon/presets/0-default.jsx"
              }
            ]
          },
          "name": "Icon",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Icon",
                  "props": {
                    "children": "home"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The name of the icon font ligature.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The color of the component. It supports those theme colors that make sense for this component.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "inherit"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "action"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "error"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "disabled"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
              "isRequired": false,
              "name": "fontSize",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "inherit"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "small"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "large"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Typography",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Typography/Typography.js"
            },
            "presets": [
              {
                "path": "src/Typography/presets/0-default.jsx"
              }
            ]
          },
          "name": "Typography",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Typography",
                  "props": {
                    "children": "Merge",
                    "variant": "body1"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Set the text-align on the component.",
              "isRequired": false,
              "name": "align",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "inherit"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "left"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "center"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "right"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "justify"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The content of the component.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The color of the component. It supports those theme colors that make sense for this component.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "error"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "inherit"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "textPrimary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "textSecondary"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, the text will have a bottom margin.",
              "isRequired": false,
              "name": "gutterBottom",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "We are empirically mapping the variant property to a range of different DOM element types.\nFor instance, subtitle1 to `<h6>`.\nIf you wish to change that mapping, you can provide your own.\nAlternatively, you can use the `component` property.\nThe default mapping is the following:",
              "isRequired": false,
              "name": "headlineMapping",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Controls whether the Typography is inline or not.",
              "isRequired": false,
              "name": "inline",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the text will not wrap, but instead will truncate with an ellipsis.",
              "isRequired": false,
              "name": "noWrap",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the text will have a bottom margin.",
              "isRequired": false,
              "name": "paragraph",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Applies the theme typography styles.\nUse `body1` as the default value with the legacy implementation and `body2` with the new one.",
              "isRequired": false,
              "name": "variant",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "h1"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "h2"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "h3"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "h4"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "h5"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "h6"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "subtitle1"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "subtitle2"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "body1"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "body2"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "caption"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "button"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "overline"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "srOnly"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "inherit"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "display4"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "display3"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "display2"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "display1"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "headline"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "title"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "subheading"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      ],
      "name": "General"
    },
    {
      "components": [
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Button",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Button/Button.js"
            },
            "presets": [
              {
                "path": "src/Button/presets/0-default.jsx"
              }
            ]
          },
          "name": "Button",
          "presets": [
            {
              "elements": {
                "action1": {
                  "name": "Button",
                  "props": {
                    "children": "Sign Up",
                    "color": "primary",
                    "fullWidth": true,
                    "size": "small",
                    "variant": "contained"
                  }
                }
              },
              "name": "default",
              "rootId": "action1"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The content of the button.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The color of the component. It supports those theme colors that make sense for this component.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "inherit"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, the button will be disabled.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
              "isRequired": false,
              "name": "disableFocusRipple",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the ripple effect will be disabled.",
              "isRequired": false,
              "name": "disableRipple",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "focusVisibleClassName",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the button will take up the full width of its container.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The URL to link to when the button is clicked.\nIf defined, an `a` element will be used as the root node.",
              "isRequired": false,
              "name": "href",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, and `variant` is `'fab'`, will use mini floating action button styling.",
              "isRequired": false,
              "name": "mini",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The size of the button.\n`small` is equivalent to the dense button styling.",
              "isRequired": false,
              "name": "size",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "small"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "medium"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "large"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The variant to use.\n__WARNING__: `flat` and `raised` are deprecated.\nInstead use `text` and `contained` respectively.\n`fab` and `extendedFab` are deprecated.\nInstead use `<Fab>` and `<Fab variant=\"extended\">`",
              "isRequired": false,
              "name": "variant",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "text"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "outlined"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "contained"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "fab"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "extendedFab"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "flat"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "raised"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Fab",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Fab/Fab.js"
            },
            "presets": [
              {
                "path": "src/Fab/presets/0-default.jsx"
              }
            ]
          },
          "name": "Fab",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Fab",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2"
                      }
                    ],
                    "color": "",
                    "label": "navigation",
                    "variant": "extended"
                  }
                },
                "2": {
                  "name": "Icon",
                  "props": {
                    "children": "navigation"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "OnClick event",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The content of the button.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Label of the button.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The color of the component. It supports those theme colors that make sense for this component.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "inherit"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the button will be disabled.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the  keyboard focus ripple will be disabled.\n`disableRipple` must also be true.",
              "isRequired": false,
              "name": "disableFocusRipple",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the ripple effect will be disabled.",
              "isRequired": false,
              "name": "disableRipple",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "focusVisibleClassName",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The URL to link to when the button is clicked.\nIf defined, an `a` element will be used as the root node.",
              "isRequired": false,
              "name": "href",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The size of the button.\n`small` is equivalent to the dense button styling.",
              "isRequired": false,
              "name": "size",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "small"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "medium"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "large"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The variant to use.",
              "isRequired": false,
              "name": "variant",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "round"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "extended"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/IconButton",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/IconButton/IconButton.js"
            },
            "presets": [
              {
                "path": "src/IconButton/presets/0-default.jsx"
              }
            ]
          },
          "name": "IconButton",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "IconButton",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2"
                      }
                    ]
                  }
                },
                "2": {
                  "name": "Icon",
                  "props": {
                    "children": "home"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The icon element.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The color of the component. It supports those theme colors that make sense for this component.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "inherit"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, the button will be disabled.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the ripple will be disabled.",
              "isRequired": false,
              "name": "disableRipple",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Link",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Link/Link.js"
            },
            "presets": [
              {
                "path": "src/Link/presets/0-default.jsx"
              }
            ]
          },
          "name": "Link",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Link",
                  "props": {
                    "children": "Merge"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Controls whether the link is inline or not. When `block` is true the link is not inline\n when `block` is false it is.",
              "isRequired": false,
              "name": "block",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The content of the link.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The color of the link.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "error"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "inherit"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "textPrimary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "textSecondary"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The target of the link. You can read about this property on the\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#Attributes)",
              "isRequired": false,
              "name": "target",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "_self"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "_blank"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "_parent"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "_top"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "`classes` property applied to the [`Typography`](/api/typography/) element.",
              "isRequired": false,
              "name": "TypographyClasses",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Controls when the link should have an underline.",
              "isRequired": false,
              "name": "underline",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "none"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "hover"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "always"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Applies the theme typography styles.",
              "isRequired": false,
              "name": "variant",
              "type": {
                "name": "string",
                "structure": {}
              }
            }
          ]
        }
      ],
      "name": "Actions"
    },
    {
      "components": [
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/AppBar",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/AppBar/AppBar.js"
            },
            "presets": [
              {
                "path": "src/AppBar/presets/0-default.jsx"
              }
            ]
          },
          "name": "AppBar",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "AppBar",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2"
                      }
                    ],
                    "position": "static"
                  }
                },
                "2": {
                  "name": "Toolbar",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "3"
                      },
                      {
                        "uxpinPresetElementId": "5"
                      },
                      {
                        "uxpinPresetElementId": "6"
                      }
                    ],
                    "justifyContent": "space-between"
                  }
                },
                "3": {
                  "name": "IconButton",
                  "props": {
                    "aria-label": "Menu",
                    "children": [
                      {
                        "uxpinPresetElementId": "4"
                      }
                    ],
                    "color": "inherit"
                  }
                },
                "4": {
                  "name": "Icon",
                  "props": {
                    "children": "menu"
                  }
                },
                "5": {
                  "name": "Typography",
                  "props": {
                    "children": "News",
                    "color": "inherit",
                    "variant": "h6"
                  }
                },
                "6": {
                  "name": "Button",
                  "props": {
                    "children": "Login",
                    "color": "inherit"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The content of the component.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The color of the component. It supports those theme colors that make sense for this component.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "inherit"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The positioning type. The behavior of the different options is described\n[in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).\nNote: `sticky` is not universally supported and will fall back to `static` when unavailable.",
              "isRequired": false,
              "name": "position",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "fixed"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "absolute"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "sticky"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "static"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "relative"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "custom style object",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/BottomNavigation",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/BottomNavigation/BottomNavigation.js"
            },
            "presets": [
              {
                "path": "src/BottomNavigation/presets/0-default.jsx"
              }
            ]
          },
          "name": "BottomNavigation",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "BottomNavigation",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2"
                      },
                      {
                        "uxpinPresetElementId": "3"
                      },
                      {
                        "uxpinPresetElementId": "4"
                      }
                    ]
                  }
                },
                "2": {
                  "name": "BottomNavigationAction",
                  "props": {
                    "icon": {
                      "uxpinPresetElementId": "2.1"
                    },
                    "label": "Home"
                  }
                },
                "3": {
                  "name": "BottomNavigationAction",
                  "props": {
                    "icon": {
                      "uxpinPresetElementId": "3.1"
                    },
                    "label": "Recents"
                  }
                },
                "4": {
                  "name": "BottomNavigationAction",
                  "props": {
                    "icon": {
                      "uxpinPresetElementId": "4.1"
                    },
                    "label": "user"
                  }
                },
                "2.1": {
                  "name": "Icon",
                  "props": {
                    "children": "home"
                  }
                },
                "3.1": {
                  "name": "Icon",
                  "props": {
                    "children": "restore"
                  }
                },
                "4.1": {
                  "name": "Icon",
                  "props": {
                    "children": "person"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The content of the component.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Callback fired when the value changes.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "If `true`, all `BottomNavigationAction`s will show their labels.\nBy default, only the selected `BottomNavigationAction` will show its label.",
              "isRequired": false,
              "name": "showLabels",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The value of the currently selected BottomNavigationAction.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "string",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/BottomNavigationAction",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/BottomNavigationAction/BottomNavigationAction.js"
            },
            "presets": [
              {
                "path": "src/BottomNavigationAction/presets/0-default.jsx"
              }
            ]
          },
          "name": "BottomNavigationAction",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "BottomNavigationAction",
                  "props": {
                    "icon": {
                      "uxpinPresetElementId": "1.1"
                    },
                    "label": "Recents",
                    "showLabel": true
                  }
                },
                "1.1": {
                  "name": "Icon",
                  "props": {
                    "children": "restore"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The icon element.",
              "isRequired": false,
              "name": "icon",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "The label element.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "selected",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the `BottomNavigationAction` will show its label.\nBy default, only the selected `BottomNavigationAction`\ninside `BottomNavigation` will show its label.",
              "isRequired": false,
              "name": "showLabel",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "string",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Drawer",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Drawer/Drawer.js"
            },
            "presets": [
              {
                "path": "src/Drawer/presets/0-default.jsx"
              }
            ]
          },
          "name": "Drawer",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Drawer",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2"
                      },
                      {
                        "uxpinPresetElementId": "3"
                      }
                    ]
                  }
                },
                "2": {
                  "name": "List",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2.1"
                      }
                    ]
                  }
                },
                "3": {
                  "name": "List",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "3.1"
                      }
                    ]
                  }
                },
                "2.1": {
                  "name": "ListItem",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2.2"
                      }
                    ]
                  }
                },
                "2.2": {
                  "name": "ListItemText",
                  "props": {
                    "children": "Send"
                  }
                },
                "3.1": {
                  "name": "ListItem",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "3.2"
                      }
                    ]
                  }
                },
                "3.2": {
                  "name": "ListItemText",
                  "props": {
                    "children": "Drafts"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Side from which the drawer will appear.",
              "isRequired": false,
              "name": "anchor",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "left"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "top"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "right"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "bottom"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The contents of the drawer.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The elevation of the drawer.",
              "isRequired": false,
              "name": "elevation",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Properties applied to the [`Modal`](/api/modal/) element.",
              "isRequired": false,
              "name": "ModalProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Callback fired when the component requests to be closed.\n\n@param {object} event The event source of the callback",
              "isRequired": false,
              "name": "onClose",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the drawer is open.",
              "isRequired": false,
              "name": "open",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Properties applied to the [`Paper`](/api/paper/) element.",
              "isRequired": false,
              "name": "PaperProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Properties applied to the [`Slide`](/api/slide/) element.",
              "isRequired": false,
              "name": "SlideProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "theme",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
              "isRequired": false,
              "name": "transitionDuration",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "shape",
                      "structure": {
                        "enter": {
                          "name": "number",
                          "structure": {}
                        },
                        "exit": {
                          "name": "number",
                          "structure": {}
                        }
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The variant to use.",
              "isRequired": false,
              "name": "variant",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "permanent"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "persistent"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "temporary"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Tab",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Tab/Tab.js"
            },
            "presets": [
              {
                "path": "src/Tab/presets/0-default.jsx"
              }
            ]
          },
          "name": "Tab",
          "presets": [
            {
              "elements": {
                "undefined": {
                  "name": "Tab",
                  "props": {
                    "label": "Active"
                  }
                }
              },
              "name": "default"
            }
          ],
          "properties": [
            {
              "description": "This property isn't supported.\nUse the `component` property if you need to change the children structure.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the tab will be disabled.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The icon element.",
              "isRequired": false,
              "name": "icon",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "@ignore\nFor server-side rendering consideration, we let the selected tab\nrender the indicator.",
              "isRequired": false,
              "name": "indicator",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "The label element.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "selected",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "textColor",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "inherit"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "You can provide your own value. Otherwise, we fallback to the child position index.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "any",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Tabs",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Tabs/Tabs.js"
            },
            "presets": [
              {
                "path": "src/Tabs/presets/0-default.jsx"
              }
            ]
          },
          "name": "Tabs",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Tabs",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2"
                      },
                      {
                        "uxpinPresetElementId": "3"
                      },
                      {
                        "uxpinPresetElementId": "4"
                      }
                    ],
                    "defaultValue": 1,
                    "indicatorColor": "primary",
                    "textColor": "primary"
                  }
                },
                "2": {
                  "name": "Tab",
                  "props": {
                    "fullWidth": true,
                    "label": "Active"
                  }
                },
                "3": {
                  "name": "Tab",
                  "props": {
                    "fullWidth": true,
                    "label": "Disabled"
                  }
                },
                "4": {
                  "name": "Tab",
                  "props": {
                    "fullWidth": true,
                    "label": "Active"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Callback fired when the component mounts.\nThis is useful when you want to trigger an action programmatically.\nIt currently only supports `updateIndicator()` action.\n\n@param {object} actions This object contains all possible actions\nthat can be triggered programmatically.",
              "isRequired": false,
              "name": "action",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the Tabss will be centered.\nThis property is intended for large views.",
              "isRequired": false,
              "name": "centered",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The content of the component.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the Tabss will grow to use all the available space.\nThis property is intended for small views, like on mobile.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Determines the color of the indicator.",
              "isRequired": false,
              "name": "indicatorColor",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Callback fired when the value changes.\n\n@param {object} event The event source of the callback\n@param {number} value We default to the index of the child",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "If `true`, it will invoke scrolling properties and allow for horizontally\nscrolling (or swiping) of the Tabs bar.",
              "isRequired": false,
              "name": "scrollable",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The component used to render the scroll buttons.",
              "isRequired": false,
              "name": "ScrollButtonComponent",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Determine behavior of scroll buttons when Tabss are set to scroll\n`auto` will only present them on medium and larger viewports\n`on` will always present them\n`off` will never present them",
              "isRequired": false,
              "name": "scrollButtons",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "auto"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "on"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "off"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Properties applied to the `TabsIndicator` element.",
              "isRequired": false,
              "name": "TabsIndicatorProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Determines the color of the `Tabs`.",
              "isRequired": false,
              "name": "textColor",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "inherit"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "theme",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The value of the currently selected `Tabs`.\nIf you don't want any selected `Tabs`, you can set this property to `false`.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Number of the tab that supposed to be active initially. Starts with  0 for the first tab.",
              "isRequired": false,
              "name": "defaultValue",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Determines additional display behavior of the Tabss:\n - `scrollable` will invoke scrolling properties and allow for horizontally\n scrolling (or swiping) of the Tabs bar.\n -`fullWidth` will make the Tabss grow to use all the available space,\n which should be used for small views, like on mobile.\n - `standard` will render the default state.",
              "isRequired": false,
              "name": "variant",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "standard"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "scrollable"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "fullWidth"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/TabsContainer",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/TabsContainer/TabsContainer.js"
            },
            "presets": [
              {
                "path": "src/TabsContainer/presets/0-default.jsx"
              }
            ]
          },
          "name": "TabsContainer",
          "presets": [
            {
              "elements": {
                "0": {
                  "name": "TabsContainer",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1"
                      },
                      {
                        "uxpinPresetElementId": "2"
                      },
                      {
                        "uxpinPresetElementId": "3"
                      }
                    ],
                    "tabs": [
                      {
                        "label": "Tab 1"
                      },
                      {
                        "label": "Tab 2"
                      },
                      {
                        "label": "Tab 3"
                      }
                    ]
                  }
                },
                "1": {
                  "name": "TabContent",
                  "props": {
                    "children": "Merge 1",
                    "dir": "x"
                  }
                },
                "2": {
                  "name": "TabContent",
                  "props": {
                    "children": "Merge 2",
                    "dir": "x"
                  }
                },
                "3": {
                  "name": "TabContent",
                  "props": {
                    "children": "Merge 3",
                    "dir": "x"
                  }
                }
              },
              "name": "default",
              "rootId": "0"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "containerColor",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "inherit"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "containerStyle",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "tabs",
              "type": {
                "name": "typedArray",
                "structure": {
                  "memberType": {
                    "name": "shape",
                    "structure": {
                      "className": {
                        "name": "string",
                        "structure": {}
                      },
                      "classes": {
                        "name": "string",
                        "structure": {}
                      },
                      "disabled": {
                        "name": "boolean",
                        "structure": {}
                      },
                      "fullWidth": {
                        "name": "boolean",
                        "structure": {}
                      },
                      "label": {
                        "name": "string",
                        "structure": {}
                      },
                      "selected": {
                        "name": "boolean",
                        "structure": {}
                      },
                      "textColor": {
                        "name": "union",
                        "structure": {
                          "elements": [
                            {
                              "name": "literal",
                              "structure": {
                                "value": "primary"
                              }
                            },
                            {
                              "name": "literal",
                              "structure": {
                                "value": "secondary"
                              }
                            },
                            {
                              "name": "literal",
                              "structure": {
                                "value": "inherit"
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "tabsCentered",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "tabsFullWidth",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "tabsScrollable",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "tabsTextColor",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "inherit"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "tabsVariant",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "standard"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "scrollable"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "fullWidth"
                      }
                    }
                  ]
                }
              }
            },
            {
              "defaultValue": {
                "value": 0
              },
              "description": "",
              "isRequired": false,
              "name": "tabsValue",
              "type": {
                "name": "number",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Toolbar",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Toolbar/Toolbar.js"
            },
            "presets": [
              {
                "path": "src/Toolbar/presets/0-default.jsx"
              }
            ]
          },
          "name": "Toolbar",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Toolbar",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2"
                      },
                      {
                        "uxpinPresetElementId": "4"
                      },
                      {
                        "uxpinPresetElementId": "5"
                      }
                    ],
                    "justifyContent": "space-between"
                  }
                },
                "2": {
                  "name": "IconButton",
                  "props": {
                    "aria-label": "Menu",
                    "children": [
                      {
                        "uxpinPresetElementId": "3"
                      }
                    ],
                    "color": "inherit"
                  }
                },
                "3": {
                  "name": "Icon",
                  "props": {
                    "children": "menu"
                  }
                },
                "4": {
                  "name": "Typography",
                  "props": {
                    "children": "News",
                    "color": "inherit",
                    "variant": "h6"
                  }
                },
                "5": {
                  "name": "Button",
                  "props": {
                    "children": "Login",
                    "color": "inherit"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, disables gutter padding.",
              "isRequired": false,
              "name": "disableGutters",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The variant to use.",
              "isRequired": false,
              "name": "variant",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "regular"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "dense"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "justifyContent",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "center"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "flex-end"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "flex-start"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "space-around"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "space-between"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "space-evenly"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "stretch"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/TabsContainer/TabContent",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/TabsContainer/TabContent/TabContent.js"
            },
            "presets": [
              {
                "path": "src/TabsContainer/TabContent/presets/0-default.jsx"
              }
            ]
          },
          "name": "TabContent",
          "presets": [
            {
              "elements": {
                "0": {
                  "name": "TabContent",
                  "props": {
                    "children": "Merge 1"
                  }
                }
              },
              "name": "default",
              "rootId": "0"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "structure": {}
              }
            }
          ]
        }
      ],
      "name": "Navigation"
    },
    {
      "components": [
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Grid",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Grid/Grid.js"
            },
            "presets": [
              {
                "path": "src/Grid/presets/0-default.jsx"
              }
            ]
          },
          "name": "Grid",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Grid",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1"
                      },
                      {
                        "uxpinPresetElementId": "1.2"
                      },
                      {
                        "uxpinPresetElementId": "1.3"
                      },
                      {
                        "uxpinPresetElementId": "1.4"
                      },
                      {
                        "uxpinPresetElementId": "1.5"
                      },
                      {
                        "uxpinPresetElementId": "1.6"
                      }
                    ],
                    "container": true,
                    "spacing": 24
                  }
                },
                "1.1": {
                  "name": "Grid",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1.1"
                      }
                    ],
                    "item": true,
                    "xs": 3
                  }
                },
                "1.1.1": {
                  "name": "Paper",
                  "props": {
                    "children": "xs=3"
                  }
                },
                "1.2": {
                  "name": "Grid",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.2.1"
                      }
                    ],
                    "item": true,
                    "xs": 3
                  }
                },
                "1.2.1": {
                  "name": "Paper",
                  "props": {
                    "children": "xs=3"
                  }
                },
                "1.3": {
                  "name": "Grid",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.3.1"
                      }
                    ],
                    "item": true,
                    "xs": 3
                  }
                },
                "1.3.1": {
                  "name": "Paper",
                  "props": {
                    "children": "xs=3"
                  }
                },
                "1.4": {
                  "name": "Grid",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.4.1"
                      }
                    ],
                    "item": true,
                    "xs": 3
                  }
                },
                "1.4.1": {
                  "name": "Paper",
                  "props": {
                    "children": "xs=3"
                  }
                },
                "1.5": {
                  "name": "Grid",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.5.1"
                      }
                    ],
                    "item": true,
                    "xs": 8
                  }
                },
                "1.5.1": {
                  "name": "Paper",
                  "props": {
                    "children": "xs=8"
                  }
                },
                "1.6": {
                  "name": "Grid",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.6.1"
                      }
                    ],
                    "item": true,
                    "xs": 4
                  }
                },
                "1.6.1": {
                  "name": "Paper",
                  "props": {
                    "children": "xs=4"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Defines the `align-content` style property.\nIt's applied for all screen sizes.",
              "isRequired": false,
              "name": "alignContent",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "stretch"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "center"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "flex-start"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "flex-end"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "space-between"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "space-around"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Defines the `align-items` style property.\nIt's applied for all screen sizes.",
              "isRequired": false,
              "name": "alignItems",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "flex-start"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "center"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "flex-end"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "stretch"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "baseline"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The content of the component.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the component will have the flex *container* behavior.\nYou should be wrapping *items* with a *container*.",
              "isRequired": false,
              "name": "container",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Defines the `flex-direction` style property.\nIt is applied for all screen sizes.",
              "isRequired": false,
              "name": "direction",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "row"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "row-reverse"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "column"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "column-reverse"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, the component will have the flex *item* behavior.\nYou should be wrapping *items* with a *container*.",
              "isRequired": false,
              "name": "item",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Defines the `justify-content` style property.\nIt is applied for all screen sizes.",
              "isRequired": false,
              "name": "justify",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "flex-start"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "center"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "flex-end"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "space-between"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "space-around"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "space-evenly"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Defines the number of grids the component is going to use.\nIt's applied for the `lg` breakpoint and wider screens if not overridden.  1-12, true, false, or auto.",
              "isRequired": false,
              "name": "lg",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "boolean",
                      "structure": {}
                    },
                    {
                      "name": "string",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Defines the number of grids the component is going to use.\nIt's applied for the `md` breakpoint and wider screens if not overridden.  1-12, true, false, or auto.",
              "isRequired": false,
              "name": "md",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "boolean",
                      "structure": {}
                    },
                    {
                      "name": "string",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Defines the number of grids the component is going to use.\nIt's applied for the `sm` breakpoint and wider screens if not overridden.  1-12, true, false, or auto.",
              "isRequired": false,
              "name": "sm",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "boolean",
                      "structure": {}
                    },
                    {
                      "name": "string",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Defines the space between the type `item` component.\nIt can only be used on a type `container` component.",
              "isRequired": false,
              "name": "spacing",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "0"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "8"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "16"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "24"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "32"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "40"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Defines the `flex-wrap` style property.\nIt's applied for all screen sizes.",
              "isRequired": false,
              "name": "wrap",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "nowrap"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "wrap"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "wrap-reverse"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Defines the number of grids the component is going to use.\nIt's applied for the `xl` breakpoint and wider screens.  1-12, true, false, or auto.",
              "isRequired": false,
              "name": "xl",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "boolean",
                      "structure": {}
                    },
                    {
                      "name": "string",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Defines the number of grids the component is going to use.\nIt's applied for all the screen sizes with the lowest priority. 1-12, true, false, or auto.",
              "isRequired": false,
              "name": "xs",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "boolean",
                      "structure": {}
                    },
                    {
                      "name": "string",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, it sets `min-width: 0` on the item.\nRefer to the limitations section of the documentation to better understand the use case.",
              "isRequired": false,
              "name": "zeroMinWidth",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/GridList",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/GridList/GridList.js"
            },
            "presets": [
              {
                "path": "src/GridList/presets/0-default.jsx"
              }
            ]
          },
          "name": "GridList",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "GridList",
                  "props": {
                    "cellHeight": 160,
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1"
                      },
                      {
                        "uxpinPresetElementId": "1.2"
                      },
                      {
                        "uxpinPresetElementId": "1.3"
                      }
                    ],
                    "cols": 3
                  }
                },
                "1.1": {
                  "name": "GridListTile",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1.1"
                      },
                      {
                        "uxpinPresetElementId": "1.1.2"
                      }
                    ],
                    "cols": 1
                  }
                },
                "1.1.1": {
                  "name": "Image",
                  "props": {
                    "alt": "Gdynia",
                    "height": "100%",
                    "objectFit": "cover",
                    "src": "http://uxpin.com/images/homepage/about-us/location-gdynia.jpg",
                    "width": "100%"
                  }
                },
                "1.1.2": {
                  "name": "GridListTileBar",
                  "props": {
                    "actionIcon": {
                      "uxpinPresetElementId": "1.1.2.1"
                    },
                    "actionPosition": "left",
                    "title": "Gdynia",
                    "titlePosition": "top"
                  }
                },
                "1.1.2.1": {
                  "name": "Icon",
                  "props": {
                    "children": "star_border"
                  }
                },
                "1.2": {
                  "name": "GridListTile",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.2.1"
                      },
                      {
                        "uxpinPresetElementId": "1.2.2"
                      }
                    ],
                    "cols": 2
                  }
                },
                "1.2.1": {
                  "name": "Image",
                  "props": {
                    "alt": "Gdansk",
                    "height": "100%",
                    "objectFit": "cover",
                    "src": "http://uxpin.com/images/homepage/jobs/bg-gdansk.jpg",
                    "width": "100%"
                  }
                },
                "1.2.2": {
                  "name": "GridListTileBar",
                  "props": {
                    "actionIcon": {
                      "uxpinPresetElementId": "1.2.2.1"
                    },
                    "actionPosition": "left",
                    "title": "Gdansk",
                    "titlePosition": "top"
                  }
                },
                "1.2.2.1": {
                  "name": "Icon",
                  "props": {
                    "children": "star_border"
                  }
                },
                "1.3": {
                  "name": "GridListTile",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.3.1"
                      },
                      {
                        "uxpinPresetElementId": "1.3.2"
                      }
                    ],
                    "cols": 3
                  }
                },
                "1.3.1": {
                  "name": "Image",
                  "props": {
                    "alt": "Mountain View",
                    "height": "100%",
                    "objectFit": "cover",
                    "src": "http://uxpin.com/images/homepage/about-us/location-mountain-view.jpg",
                    "width": "100%"
                  }
                },
                "1.3.2": {
                  "name": "GridListTileBar",
                  "props": {
                    "actionIcon": {
                      "uxpinPresetElementId": "1.3.2.1"
                    },
                    "actionPosition": "left",
                    "title": "Mountain View",
                    "titlePosition": "top"
                  }
                },
                "1.3.2.1": {
                  "name": "Icon",
                  "props": {
                    "children": "star_border"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Number of px for one cell height.\nYou can set `'auto'` if you want to let the children determine the height.",
              "isRequired": false,
              "name": "cellHeight",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "union",
                      "structure": {
                        "elements": [
                          {
                            "name": "literal",
                            "structure": {
                              "value": "auto"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Grid Tiles that will be in Grid List.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Number of columns.",
              "isRequired": false,
              "name": "cols",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Number of px for the spacing between tiles.",
              "isRequired": false,
              "name": "spacing",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/GridListTile",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/GridListTile/GridListTile.js"
            },
            "presets": [
              {
                "path": "src/GridListTile/presets/0-default.jsx"
              }
            ]
          },
          "name": "GridListTile",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "GridListTile",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1"
                      },
                      {
                        "uxpinPresetElementId": "1.2"
                      }
                    ],
                    "cols": 1
                  }
                },
                "1.1": {
                  "name": "Image",
                  "props": {
                    "alt": "Gdynia",
                    "height": "100%",
                    "objectFit": "cover",
                    "src": "http://uxpin.com/images/homepage/about-us/location-gdynia.jpg",
                    "width": "100%"
                  }
                },
                "1.2": {
                  "name": "GridListTileBar",
                  "props": {
                    "actionIcon": {
                      "uxpinPresetElementId": "1.2.1"
                    },
                    "actionPosition": "left",
                    "title": "Gdynia",
                    "titlePosition": "top"
                  }
                },
                "1.2.1": {
                  "name": "Icon",
                  "props": {
                    "children": "star_border"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Theoretically you can pass any node as children, but the main use case is to pass an img,\nin which case GridListTile takes care of making the image \"cover\" available space\n(similar to `background-size: cover` or to `object-fit: cover`).",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Width of the tile in number of grid cells.",
              "isRequired": false,
              "name": "cols",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Height of the tile in number of grid cells.",
              "isRequired": false,
              "name": "rows",
              "type": {
                "name": "number",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/GridListTileBar",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/GridListTileBar/GridListTileBar.js"
            },
            "presets": [
              {
                "path": "src/GridListTileBar/presets/0-default.jsx"
              }
            ]
          },
          "name": "GridListTileBar",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "GridListTileBar",
                  "props": {
                    "actionIcon": {
                      "uxpinPresetElementId": "1.1"
                    },
                    "actionPosition": "left",
                    "title": "Gdynia",
                    "titlePosition": "top"
                  }
                },
                "1.1": {
                  "name": "Icon",
                  "props": {
                    "children": "star_border"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "An IconButton element to be used as secondary action target\n(primary action target is the tile itself).",
              "isRequired": false,
              "name": "actionIcon",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Position of secondary action IconButton.",
              "isRequired": false,
              "name": "actionPosition",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "left"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "right"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "String or element serving as subtitle (support text).",
              "isRequired": false,
              "name": "subtitle",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Title to be displayed on tile.",
              "isRequired": false,
              "name": "title",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Position of the title bar.",
              "isRequired": false,
              "name": "titlePosition",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "top"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "bottom"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      ],
      "name": "Layout"
    },
    {
      "components": [
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Card",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Card/Card.js"
            },
            "presets": [
              {
                "path": "src/Card/presets/0-default.jsx"
              }
            ]
          },
          "name": "Card",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Card",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1"
                      },
                      {
                        "uxpinPresetElementId": "1.2"
                      },
                      {
                        "uxpinPresetElementId": "1.3"
                      },
                      {
                        "uxpinPresetElementId": "1.4"
                      }
                    ]
                  }
                },
                "1.1": {
                  "name": "CardHeader",
                  "props": {
                    "action": {
                      "uxpinPresetElementId": "1.1.2"
                    },
                    "avatar": {
                      "uxpinPresetElementId": "1.1.1"
                    },
                    "subheader": "September 14, 2016",
                    "title": "Shrimp and Chorizo Paella"
                  }
                },
                "1.1.1": {
                  "name": "Avatar",
                  "props": {
                    "aria-label": "Recipe",
                    "children": "R"
                  }
                },
                "1.1.2": {
                  "name": "IconButton",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1.2.1"
                      }
                    ]
                  }
                },
                "1.1.2.1": {
                  "name": "Icon",
                  "props": {
                    "children": "more_vert"
                  }
                },
                "1.2": {
                  "name": "CardMedia",
                  "props": {
                    "image": "https://www.platingsandpairings.com/wp-content/uploads/2016/01/Paella-1-Square.jpg",
                    "style": {
                      "height": "100px"
                    }
                  }
                },
                "1.3": {
                  "name": "CardContent",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.3.1"
                      }
                    ]
                  }
                },
                "1.3.1": {
                  "name": "Typography",
                  "props": {
                    "children": "This impressive paella is a perfect party dish and a fun meal to cook together with your guests. Add 1 cup of frozen peas along with the mussels, if you like.",
                    "component": "p"
                  }
                },
                "1.4": {
                  "name": "CardActions",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.4.1"
                      },
                      {
                        "uxpinPresetElementId": "1.4.2"
                      }
                    ],
                    "disableActionSpacing": true
                  }
                },
                "1.4.1": {
                  "name": "IconButton",
                  "props": {
                    "aria-label": "Add to favorites",
                    "children": [
                      {
                        "uxpinPresetElementId": "1.4.1.1"
                      }
                    ]
                  }
                },
                "1.4.1.1": {
                  "name": "Icon",
                  "props": {
                    "children": "favorite"
                  }
                },
                "1.4.2": {
                  "name": "IconButton",
                  "props": {
                    "aria-label": "Share",
                    "children": [
                      {
                        "uxpinPresetElementId": "1.4.2.1"
                      }
                    ]
                  }
                },
                "1.4.2.1": {
                  "name": "Icon",
                  "props": {
                    "children": "share"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the card will use raised styling.",
              "isRequired": false,
              "name": "raised",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/CardActions",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/CardActions/CardActions.js"
            },
            "presets": [
              {
                "path": "src/CardActions/presets/0-default.jsx"
              }
            ]
          },
          "name": "CardActions",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "CardActions",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2"
                      },
                      {
                        "uxpinPresetElementId": "3"
                      }
                    ]
                  }
                },
                "2": {
                  "name": "IconButton",
                  "props": {
                    "aria-label": "Add to favorites",
                    "children": [
                      {
                        "uxpinPresetElementId": "21"
                      }
                    ]
                  }
                },
                "3": {
                  "name": "IconButton",
                  "props": {
                    "aria-label": "Share",
                    "children": [
                      {
                        "uxpinPresetElementId": "31"
                      }
                    ]
                  }
                },
                "21": {
                  "name": "Icon",
                  "props": {
                    "children": "favorite"
                  }
                },
                "31": {
                  "name": "Icon",
                  "props": {
                    "children": "share"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The content of the component.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the card actions do not have additional margin.",
              "isRequired": false,
              "name": "disableActionSpacing",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/CardContent",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/CardContent/CardContent.js"
            },
            "presets": [
              {
                "path": "src/CardContent/presets/0-default.jsx"
              }
            ]
          },
          "name": "CardContent",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "CardContent",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2"
                      },
                      {
                        "uxpinPresetElementId": "3"
                      },
                      {
                        "uxpinPresetElementId": "4"
                      },
                      {
                        "uxpinPresetElementId": "5"
                      },
                      {
                        "uxpinPresetElementId": "6"
                      }
                    ]
                  }
                },
                "2": {
                  "name": "Typography",
                  "props": {
                    "children": "Method:",
                    "paragraph": true
                  }
                },
                "3": {
                  "name": "Typography",
                  "props": {
                    "children": "Heat 1/2 cup of the broth in a pot until simmering, add saffron and set aside for 10 minutes.",
                    "paragraph": true
                  }
                },
                "4": {
                  "name": "Typography",
                  "props": {
                    "children": "Heat oil in a (14- to 16-inch) paella pan or a large, deep skillet over medium-high heat. Add chicken, shrimp and chorizo, and cook, stirring occasionally until lightly browned, 6 to 8 minutes. Transfer shrimp to a large plate and set aside, leaving chicken and chorizo in the pan. Add pimentón, bay leaves, garlic, tomatoes, onion, salt and pepper, and cook, stirring often until thickened and fragrant, about 10 minutes. Add saffron broth and remaining 4 1/2 cups chicken broth; bring to a boil.",
                    "paragraph": true
                  }
                },
                "5": {
                  "name": "Typography",
                  "props": {
                    "children": "Add rice and stir very gently to distribute. Top with artichokes and peppers, and cook without stirring, until most of the liquid is absorbed, 15 to 18 minutes. Reduce heat to medium-low, add reserved shrimp and mussels, tucking them down into the rice, and cook again without stirring, until mussels have opened and rice is just tender, 5 to 7 minutes more. (Discard any mussels that don’t open.)",
                    "paragraph": true
                  }
                },
                "6": {
                  "name": "Typography",
                  "props": {
                    "children": "Set aside off of the heat to let rest for 10 minutes, and then serve."
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/CardHeader",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/CardHeader/CardHeader.js"
            },
            "presets": [
              {
                "path": "src/CardHeader/presets/0-default.jsx"
              }
            ]
          },
          "name": "CardHeader",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "CardHeader",
                  "props": {
                    "action": {
                      "uxpinPresetElementId": "1.2"
                    },
                    "avatar": {
                      "uxpinPresetElementId": "1.1"
                    },
                    "subheader": "September 14, 2016",
                    "title": "Shrimp and Chorizo Paella"
                  }
                },
                "1.1": {
                  "name": "Avatar",
                  "props": {
                    "aria-label": "Recipe",
                    "children": "R"
                  }
                },
                "1.2": {
                  "name": "IconButton",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.2.1"
                      }
                    ]
                  }
                },
                "1.2.1": {
                  "name": "Icon",
                  "props": {
                    "children": "more_vert"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The action to display in the card header.",
              "isRequired": false,
              "name": "action",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "The Avatar for the Card Header.",
              "isRequired": false,
              "name": "avatar",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the children won't be wrapped by a Typography component.\nThis can be useful to render an alternative Typography variant by wrapping\nthe `title` text, and optional `subheader` text\nwith the Typography component.",
              "isRequired": false,
              "name": "disableTypography",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The content of the component.",
              "isRequired": false,
              "name": "subheader",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "These props will be forwarded to the subheader\n(as long as disableTypography is not `true`).",
              "isRequired": false,
              "name": "subheaderTypographyProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The content of the Card Title.",
              "isRequired": false,
              "name": "title",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "These props will be forwarded to the title\n(as long as disableTypography is not `true`).",
              "isRequired": false,
              "name": "titleTypographyProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/CardMedia",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/CardMedia/CardMedia.js"
            },
            "presets": [
              {
                "path": "src/CardMedia/presets/0-default.jsx"
              }
            ]
          },
          "name": "CardMedia",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "CardMedia",
                  "props": {
                    "component": "img",
                    "src": "https://www.platingsandpairings.com/wp-content/uploads/2016/01/Paella-1-Square.jpg",
                    "style": {
                      "height": "100px",
                      "objectFit": "cover"
                    }
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Image to be displayed as a background image.\nEither `image` or `src` prop must be specified.\nNote that caller must specify height otherwise the image will not be visible.",
              "isRequired": false,
              "name": "image",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "An alias for `image` property.\nAvailable only with media components.\nMedia components: `video`, `audio`, `picture`, `iframe`, `img`.",
              "isRequired": false,
              "name": "src",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "structure": {}
              }
            }
          ]
        }
      ],
      "name": "Card"
    },
    {
      "components": [
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Checkbox",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Checkbox/Checkbox.js"
            },
            "presets": [
              {
                "path": "src/Checkbox/presets/0-default.jsx"
              }
            ]
          },
          "name": "Checkbox",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Checkbox",
                  "props": {}
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "If `true`, the component is checked.",
              "isRequired": false,
              "name": "checked",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The icon to display when the component is checked.",
              "isRequired": false,
              "name": "checkedIcon",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The color of the component. It supports those theme colors that make sense for this component.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, the switch will be disabled.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the ripple effect will be disabled.",
              "isRequired": false,
              "name": "disableRipple",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The icon to display when the component is unchecked.",
              "isRequired": false,
              "name": "icon",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "The id of the `input` element.",
              "isRequired": false,
              "name": "id",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the component appears indeterminate.\nThis does not set the native input element to indeterminate due\nto inconsistent behavior across browsers.\nHowever, we set a `data-indeterminate` attribute on the input.",
              "isRequired": false,
              "name": "indeterminate",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The icon to display when the component is indeterminate.",
              "isRequired": false,
              "name": "indeterminateIcon",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Properties applied to the `input` element.",
              "isRequired": false,
              "name": "inputProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Use that property to pass a ref callback to the native input component.",
              "isRequired": false,
              "name": "inputRef",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "func",
                      "structure": {}
                    },
                    {
                      "name": "object",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Callback fired when the state is changed.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The input component property `type`.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The value of the component.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "string",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/FilledInput",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/FilledInput/FilledInput.js"
            },
            "presets": [
              {
                "path": "src/FilledInput/presets/0-default.jsx"
              }
            ]
          },
          "name": "FilledInput",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "FilledInput",
                  "props": {}
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "This property helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it here:\nhttps://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill",
              "isRequired": false,
              "name": "autoComplete",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the input will be focused during the first mount.",
              "isRequired": false,
              "name": "autoFocus",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": true,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The CSS class name of the wrapper element.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The default input value, useful when not controlling the component.",
              "isRequired": false,
              "name": "defaultValue",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "boolean",
                      "structure": {}
                    },
                    {
                      "name": "object",
                      "structure": {}
                    },
                    {
                      "name": "typedArray",
                      "structure": {
                        "memberType": {
                          "name": "union",
                          "structure": {
                            "elements": [
                              {
                                "name": "string",
                                "structure": {}
                              },
                              {
                                "name": "number",
                                "structure": {}
                              },
                              {
                                "name": "boolean",
                                "structure": {}
                              },
                              {
                                "name": "object",
                                "structure": {}
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, the input will be disabled.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "End `InputAdornment` for this component.",
              "isRequired": false,
              "name": "endAdornment",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl.",
              "isRequired": false,
              "name": "error",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the input will take up the full width of its container.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The id of the `input` element.",
              "isRequired": false,
              "name": "id",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The component used for the native input.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "inputComponent",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Attributes applied to the `input` element.",
              "isRequired": false,
              "name": "inputProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Use that property to pass a ref callback to the native input component.",
              "isRequired": false,
              "name": "inputRef",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "func",
                      "structure": {}
                    },
                    {
                      "name": "object",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "The width of the legend.",
              "isRequired": true,
              "name": "labelWidth",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
              "isRequired": false,
              "name": "margin",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "dense"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "none"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, a textarea element will be rendered.",
              "isRequired": false,
              "name": "multiline",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Name attribute of the `input` element.",
              "isRequired": false,
              "name": "name",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the outline is notched to accommodate the label.",
              "isRequired": false,
              "name": "notched",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Callback fired when the value is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The short hint displayed in the input before the user enters a value.",
              "isRequired": false,
              "name": "placeholder",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "It prevents the user from changing the value of the field\n(not from interacting with the field).",
              "isRequired": false,
              "name": "readOnly",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the input will be required.",
              "isRequired": false,
              "name": "required",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Number of rows to display when multiline option is set to true.",
              "isRequired": false,
              "name": "rows",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Maximum number of rows to display when multiline option is set to true.",
              "isRequired": false,
              "name": "rowsMax",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Start `InputAdornment` for this component.",
              "isRequired": false,
              "name": "startAdornment",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Type of the input element. It should be a valid HTML5 input type.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The input value, required for a controlled component.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "boolean",
                      "structure": {}
                    },
                    {
                      "name": "object",
                      "structure": {}
                    },
                    {
                      "name": "typedArray",
                      "structure": {
                        "memberType": {
                          "name": "union",
                          "structure": {
                            "elements": [
                              {
                                "name": "string",
                                "structure": {}
                              },
                              {
                                "name": "number",
                                "structure": {}
                              },
                              {
                                "name": "boolean",
                                "structure": {}
                              },
                              {
                                "name": "object",
                                "structure": {}
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/FormControl",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/FormControl/FormControl.js"
            },
            "presets": [
              {
                "path": "src/FormControl/presets/0-default.jsx"
              }
            ]
          },
          "name": "FormControl",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "FormControl",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2"
                      },
                      {
                        "uxpinPresetElementId": "3"
                      },
                      {
                        "uxpinPresetElementId": "3.2"
                      }
                    ],
                    "fullWidth": true
                  }
                },
                "2": {
                  "name": "InputLabel",
                  "props": {
                    "children": "Age",
                    "htmlFor": "age-helper"
                  }
                },
                "3": {
                  "name": "Select",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "3.1.1"
                      },
                      {
                        "uxpinPresetElementId": "3.1.2"
                      },
                      {
                        "uxpinPresetElementId": "3.1.3"
                      },
                      {
                        "uxpinPresetElementId": "3.1.4"
                      }
                    ]
                  }
                },
                "3.1.1": {
                  "name": "MenuItem",
                  "props": {
                    "children": "None",
                    "value": ""
                  }
                },
                "3.1.2": {
                  "name": "MenuItem",
                  "props": {
                    "children": "Ten",
                    "value": 10
                  }
                },
                "3.1.3": {
                  "name": "MenuItem",
                  "props": {
                    "children": "Twenty",
                    "value": 20
                  }
                },
                "3.1.4": {
                  "name": "MenuItem",
                  "props": {
                    "children": "Thirty",
                    "value": 30
                  }
                },
                "3.2": {
                  "name": "FormHelperText",
                  "props": {
                    "children": "Some important helper text"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The contents of the form control.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": true,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the label, input and helper text should be displayed in a disabled state.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the label should be displayed in an error state.",
              "isRequired": false,
              "name": "error",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the component will take up the full width of its container.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components.",
              "isRequired": false,
              "name": "margin",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "none"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "dense"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "normal"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, the label will indicate that the input is required.",
              "isRequired": false,
              "name": "required",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The variant to use.",
              "isRequired": false,
              "name": "variant",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "standard"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "outlined"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "filled"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/FormControlLabel",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/FormControlLabel/FormControlLabel.js"
            },
            "presets": [
              {
                "path": "src/FormControlLabel/presets/0-default.jsx"
              }
            ]
          },
          "name": "FormControlLabel",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "FormControlLabel",
                  "props": {
                    "control": {
                      "uxpinPresetElementId": "1.1"
                    },
                    "label": "Gilad Gray"
                  }
                },
                "1.1": {
                  "name": "Checkbox",
                  "props": {
                    "value": "gilad"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "If `true`, the component appears selected.",
              "isRequired": false,
              "name": "checked",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "boolean",
                      "structure": {}
                    },
                    {
                      "name": "string",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": true,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.",
              "isRequired": false,
              "name": "control",
              "type": {
                "name": "element",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the control will be disabled.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Use that property to pass a ref callback to the native input component.",
              "isRequired": false,
              "name": "inputRef",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "func",
                      "structure": {}
                    },
                    {
                      "name": "object",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "The text to be used in an enclosing label element.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "The position of the label.",
              "isRequired": false,
              "name": "labelPlacement",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "end"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "start"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "top"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "bottom"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "muiFormControl",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "name",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Callback fired when the state is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.checked`.\n@param {boolean} checked The `checked` value of the switch",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The value of the component.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "string",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/FormGroup",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/FormGroup/FormGroup.js"
            },
            "presets": [
              {
                "path": "src/FormGroup/presets/0-default.jsx"
              }
            ]
          },
          "name": "FormGroup",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "FormControl",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2"
                      },
                      {
                        "uxpinPresetElementId": "3"
                      }
                    ],
                    "component": "fieldset"
                  }
                },
                "2": {
                  "name": "FormLabel",
                  "props": {
                    "children": "Assign responsibility",
                    "component": "legend"
                  }
                },
                "3": {
                  "name": "FormGroup",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "4"
                      },
                      {
                        "uxpinPresetElementId": "6"
                      },
                      {
                        "uxpinPresetElementId": "8"
                      }
                    ]
                  }
                },
                "4": {
                  "name": "FormControlLabel",
                  "props": {
                    "control": {
                      "uxpinPresetElementId": "5"
                    },
                    "label": "Gilad Gray"
                  }
                },
                "5": {
                  "name": "Checkbox",
                  "props": {
                    "value": "gilad"
                  }
                },
                "6": {
                  "name": "FormControlLabel",
                  "props": {
                    "control": {
                      "uxpinPresetElementId": "7"
                    },
                    "label": "Jason Killian"
                  }
                },
                "7": {
                  "name": "Checkbox",
                  "props": {
                    "value": "jason"
                  }
                },
                "8": {
                  "name": "FormControlLabel",
                  "props": {
                    "control": {
                      "uxpinPresetElementId": "9"
                    },
                    "label": "Antoine Llorca"
                  }
                },
                "9": {
                  "name": "Checkbox",
                  "props": {
                    "value": "antoine"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The content of the component.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": true,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Display group of elements in a compact row.",
              "isRequired": false,
              "name": "row",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/FormHelperText",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/FormHelperText/FormHelperText.js"
            },
            "presets": [
              {
                "path": "src/FormHelperText/presets/0-default.jsx"
              }
            ]
          },
          "name": "FormHelperText",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "FormHelperText",
                  "props": {
                    "children": "Merge"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The content of the component.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": true,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the helper text should be displayed in a disabled state.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, helper text should be displayed in an error state.",
              "isRequired": false,
              "name": "error",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the helper text should use filled classes key.",
              "isRequired": false,
              "name": "filled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the helper text should use focused classes key.",
              "isRequired": false,
              "name": "focused",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
              "isRequired": false,
              "name": "margin",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "dense"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "muiFormControl",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the helper text should use required classes key.",
              "isRequired": false,
              "name": "required",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The variant to use.",
              "isRequired": false,
              "name": "variant",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "standard"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "outlined"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "filled"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/FormLabel",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/FormLabel/FormLabel.js"
            },
            "presets": [
              {
                "path": "src/FormLabel/presets/0-default.jsx"
              }
            ]
          },
          "name": "FormLabel",
          "presets": [
            {
              "elements": {
                "undefined": {
                  "name": "FormLabel",
                  "props": {
                    "children": "Merge"
                  }
                }
              },
              "name": "default"
            }
          ],
          "properties": [
            {
              "description": "The content of the component.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": true,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the label should be displayed in a disabled state.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the label should be displayed in an error state.",
              "isRequired": false,
              "name": "error",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the label should use filled classes key.",
              "isRequired": false,
              "name": "filled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the input of this label is focused (used by `FormGroup` components).",
              "isRequired": false,
              "name": "focused",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "muiFormControl",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the label will indicate that the input is required.",
              "isRequired": false,
              "name": "required",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Input",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Input/Input.js"
            },
            "presets": [
              {
                "path": "src/Input/presets/0-default.jsx"
              }
            ]
          },
          "name": "Input",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Input",
                  "props": {}
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "This property helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it here:\nhttps://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill",
              "isRequired": false,
              "name": "autoComplete",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the input will be focused during the first mount.",
              "isRequired": false,
              "name": "autoFocus",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": true,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The CSS class name of the wrapper element.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The default input value, useful when not controlling the component.",
              "isRequired": false,
              "name": "defaultValue",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "boolean",
                      "structure": {}
                    },
                    {
                      "name": "object",
                      "structure": {}
                    },
                    {
                      "name": "typedArray",
                      "structure": {
                        "memberType": {
                          "name": "union",
                          "structure": {
                            "elements": [
                              {
                                "name": "string",
                                "structure": {}
                              },
                              {
                                "name": "number",
                                "structure": {}
                              },
                              {
                                "name": "boolean",
                                "structure": {}
                              },
                              {
                                "name": "object",
                                "structure": {}
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, the input will be disabled.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "End `InputAdornment` for this component.",
              "isRequired": false,
              "name": "endAdornment",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl.",
              "isRequired": false,
              "name": "error",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the input will take up the full width of its container.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The id of the `input` element.",
              "isRequired": false,
              "name": "id",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The component used for the native input.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "inputComponent",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Attributes applied to the `input` element.",
              "isRequired": false,
              "name": "inputProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Use that property to pass a ref callback to the native input component.",
              "isRequired": false,
              "name": "inputRef",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "func",
                      "structure": {}
                    },
                    {
                      "name": "object",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "The width of the legend.",
              "isRequired": true,
              "name": "labelWidth",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
              "isRequired": false,
              "name": "margin",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "dense"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "none"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, a textarea element will be rendered.",
              "isRequired": false,
              "name": "multiline",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Name attribute of the `input` element.",
              "isRequired": false,
              "name": "name",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the outline is notched to accommodate the label.",
              "isRequired": false,
              "name": "notched",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Callback fired when the value is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The short hint displayed in the input before the user enters a value.",
              "isRequired": false,
              "name": "placeholder",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "It prevents the user from changing the value of the field\n(not from interacting with the field).",
              "isRequired": false,
              "name": "readOnly",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the input will be required.",
              "isRequired": false,
              "name": "required",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Number of rows to display when multiline option is set to true.",
              "isRequired": false,
              "name": "rows",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Maximum number of rows to display when multiline option is set to true.",
              "isRequired": false,
              "name": "rowsMax",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Start `InputAdornment` for this component.",
              "isRequired": false,
              "name": "startAdornment",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Type of the input element. It should be a valid HTML5 input type.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The input value, required for a controlled component.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "boolean",
                      "structure": {}
                    },
                    {
                      "name": "object",
                      "structure": {}
                    },
                    {
                      "name": "typedArray",
                      "structure": {
                        "memberType": {
                          "name": "union",
                          "structure": {
                            "elements": [
                              {
                                "name": "string",
                                "structure": {}
                              },
                              {
                                "name": "number",
                                "structure": {}
                              },
                              {
                                "name": "boolean",
                                "structure": {}
                              },
                              {
                                "name": "object",
                                "structure": {}
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/InputLabel",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/InputLabel/InputLabel.js"
            },
            "presets": [
              {
                "path": "src/InputLabel/presets/0-default.jsx"
              }
            ]
          },
          "name": "InputLabel",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "InputLabel",
                  "props": {
                    "children": "Merge"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The contents of the `InputLabel`.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": true,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the transition animation is disabled.",
              "isRequired": false,
              "name": "disableAnimation",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, apply disabled class.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the label will be displayed in an error state.",
              "isRequired": false,
              "name": "error",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the input of this label is focused.",
              "isRequired": false,
              "name": "focused",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "`classes` property applied to the [`FormLabel`](/api/form-label/) element.",
              "isRequired": false,
              "name": "FormLabelClasses",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
              "isRequired": false,
              "name": "margin",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "dense"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "muiFormControl",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "if `true`, the label will indicate that the input is required.",
              "isRequired": false,
              "name": "required",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the label is shrunk.",
              "isRequired": false,
              "name": "shrink",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The variant to use.",
              "isRequired": false,
              "name": "variant",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "standard"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "outlined"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "filled"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/MenuItem",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/MenuItem/MenuItem.js"
            },
            "presets": [
              {
                "path": "src/MenuItem/presets/0-default.jsx"
              }
            ]
          },
          "name": "MenuItem",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "MenuItem",
                  "props": {
                    "children": "Merge 1"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Menu item contents.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the left and right padding is removed.",
              "isRequired": false,
              "name": "disableGutters",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "role",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "selected",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/MenuList",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/MenuList/MenuList.js"
            },
            "presets": [
              {
                "path": "src/MenuList/presets/0-default.jsx"
              }
            ]
          },
          "name": "MenuList",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "MenuList",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2"
                      },
                      {
                        "uxpinPresetElementId": "3"
                      },
                      {
                        "uxpinPresetElementId": "4"
                      }
                    ]
                  }
                },
                "2": {
                  "name": "MenuItem",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2.1"
                      },
                      {
                        "uxpinPresetElementId": "2.1.2"
                      }
                    ]
                  }
                },
                "3": {
                  "name": "MenuItem",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "3.1"
                      },
                      {
                        "uxpinPresetElementId": "3.1.2"
                      }
                    ]
                  }
                },
                "4": {
                  "name": "MenuItem",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "4.1"
                      },
                      {
                        "uxpinPresetElementId": "4.1.2"
                      }
                    ]
                  }
                },
                "2.1": {
                  "name": "ListItemIcon",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2.1.1"
                      }
                    ]
                  }
                },
                "2.1.1": {
                  "name": "Icon",
                  "props": {
                    "children": "send"
                  }
                },
                "2.1.2": {
                  "name": "ListItemText",
                  "props": {
                    "inset": true,
                    "primary": "Send mail"
                  }
                },
                "3.1": {
                  "name": "ListItemIcon",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "3.1.1"
                      }
                    ]
                  }
                },
                "3.1.1": {
                  "name": "Icon",
                  "props": {
                    "children": "drafts"
                  }
                },
                "3.1.2": {
                  "name": "ListItemText",
                  "props": {
                    "inset": true,
                    "primary": "Drafts"
                  }
                },
                "4.1": {
                  "name": "ListItemIcon",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "4.1.1"
                      }
                    ]
                  }
                },
                "4.1.1": {
                  "name": "Icon",
                  "props": {
                    "children": "inbox"
                  }
                },
                "4.1.2": {
                  "name": "ListItemText",
                  "props": {
                    "inset": true,
                    "primary": "Inbox"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "MenuList contents, normally `MenuListItem`s.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the MenuList items will not wrap focus.",
              "isRequired": false,
              "name": "disableListWrap",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "onBlur",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "onKeyDown",
              "type": {
                "name": "func",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/OutlinedInput",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/OutlinedInput/OutlinedInput.js"
            },
            "presets": [
              {
                "path": "src/OutlinedInput/presets/0-default.jsx"
              }
            ]
          },
          "name": "OutlinedInput",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "OutlinedInput",
                  "props": {}
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "This property helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it here:\nhttps://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill",
              "isRequired": false,
              "name": "autoComplete",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the input will be focused during the first mount.",
              "isRequired": false,
              "name": "autoFocus",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": true,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The CSS class name of the wrapper element.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The default input value, useful when not controlling the component.",
              "isRequired": false,
              "name": "defaultValue",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "boolean",
                      "structure": {}
                    },
                    {
                      "name": "object",
                      "structure": {}
                    },
                    {
                      "name": "typedArray",
                      "structure": {
                        "memberType": {
                          "name": "union",
                          "structure": {
                            "elements": [
                              {
                                "name": "string",
                                "structure": {}
                              },
                              {
                                "name": "number",
                                "structure": {}
                              },
                              {
                                "name": "boolean",
                                "structure": {}
                              },
                              {
                                "name": "object",
                                "structure": {}
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, the input will be disabled.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "End `InputAdornment` for this component.",
              "isRequired": false,
              "name": "endAdornment",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the input will indicate an error. This is normally obtained via context from\nFormControl.",
              "isRequired": false,
              "name": "error",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the input will take up the full width of its container.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The id of the `input` element.",
              "isRequired": false,
              "name": "id",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The component used for the native input.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "inputComponent",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Attributes applied to the `input` element.",
              "isRequired": false,
              "name": "inputProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Use that property to pass a ref callback to the native input component.",
              "isRequired": false,
              "name": "inputRef",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "func",
                      "structure": {}
                    },
                    {
                      "name": "object",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "The width of the legend.",
              "isRequired": true,
              "name": "labelWidth",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.",
              "isRequired": false,
              "name": "margin",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "dense"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "none"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, a textarea element will be rendered.",
              "isRequired": false,
              "name": "multiline",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Name attribute of the `input` element.",
              "isRequired": false,
              "name": "name",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the outline is notched to accommodate the label.",
              "isRequired": false,
              "name": "notched",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Callback fired when the value is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The short hint displayed in the input before the user enters a value.",
              "isRequired": false,
              "name": "placeholder",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "It prevents the user from changing the value of the field\n(not from interacting with the field).",
              "isRequired": false,
              "name": "readOnly",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the input will be required.",
              "isRequired": false,
              "name": "required",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Number of rows to display when multiline option is set to true.",
              "isRequired": false,
              "name": "rows",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Maximum number of rows to display when multiline option is set to true.",
              "isRequired": false,
              "name": "rowsMax",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Start `InputAdornment` for this component.",
              "isRequired": false,
              "name": "startAdornment",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Type of the input element. It should be a valid HTML5 input type.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The input value, required for a controlled component.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "boolean",
                      "structure": {}
                    },
                    {
                      "name": "object",
                      "structure": {}
                    },
                    {
                      "name": "typedArray",
                      "structure": {
                        "memberType": {
                          "name": "union",
                          "structure": {
                            "elements": [
                              {
                                "name": "string",
                                "structure": {}
                              },
                              {
                                "name": "number",
                                "structure": {}
                              },
                              {
                                "name": "boolean",
                                "structure": {}
                              },
                              {
                                "name": "object",
                                "structure": {}
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Radio",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Radio/Radio.js"
            },
            "presets": [
              {
                "path": "src/Radio/presets/0-default.jsx"
              }
            ]
          },
          "name": "Radio",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Radio",
                  "props": {}
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "If `true`, the component is checked.",
              "isRequired": false,
              "name": "checked",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "boolean",
                      "structure": {}
                    },
                    {
                      "name": "string",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "The icon to display when the component is checked.",
              "isRequired": false,
              "name": "checkedIcon",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": true,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The color of the component. It supports those theme colors that make sense for this component.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, the switch will be disabled.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the ripple effect will be disabled.",
              "isRequired": false,
              "name": "disableRipple",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The icon to display when the component is unchecked.",
              "isRequired": false,
              "name": "icon",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "The id of the `input` element.",
              "isRequired": false,
              "name": "id",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Attributes applied to the `input` element.",
              "isRequired": false,
              "name": "inputProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Use that property to pass a ref callback to the native input component.",
              "isRequired": false,
              "name": "inputRef",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "func",
                      "structure": {}
                    },
                    {
                      "name": "object",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Callback fired when the state is changed.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`.\n@param {boolean} checked The `checked` value of the switch",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The input component property `type`.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The value of the component.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "boolean",
                      "structure": {}
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/RadioGroup",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/RadioGroup/RadioGroup.js"
            },
            "presets": [
              {
                "path": "src/RadioGroup/presets/0-default.jsx"
              }
            ]
          },
          "name": "RadioGroup",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "FormControl",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2"
                      },
                      {
                        "uxpinPresetElementId": "3"
                      }
                    ],
                    "component": "fieldset"
                  }
                },
                "2": {
                  "name": "FormLabel",
                  "props": {
                    "children": "Favorite Band",
                    "component": "legend"
                  }
                },
                "3": {
                  "name": "RadioGroup",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "4"
                      },
                      {
                        "uxpinPresetElementId": "5"
                      },
                      {
                        "uxpinPresetElementId": "6"
                      }
                    ]
                  }
                },
                "4": {
                  "name": "FormControlLabel",
                  "props": {
                    "control": {
                      "uxpinPresetElementId": "4.1"
                    },
                    "label": "Black Sabbath",
                    "value": "black sabbath"
                  }
                },
                "5": {
                  "name": "FormControlLabel",
                  "props": {
                    "control": {
                      "uxpinPresetElementId": "5.1"
                    },
                    "label": "Led Zeppelin",
                    "value": "led zeppelin"
                  }
                },
                "6": {
                  "name": "FormControlLabel",
                  "props": {
                    "control": {
                      "uxpinPresetElementId": "6.1"
                    },
                    "label": "Pink Floyd",
                    "value": "pink floyd"
                  }
                },
                "4.1": {
                  "name": "Radio",
                  "props": {}
                },
                "5.1": {
                  "name": "Radio",
                  "props": {}
                },
                "6.1": {
                  "name": "Radio",
                  "props": {}
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The content of the component.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "The name used to reference the value of the control.",
              "isRequired": false,
              "name": "name",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "onBlur",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Callback fired when a RadioGroup button is selected.\n\n@param {object} event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value`.\n@param {string} value The `value` of the selected RadioGroup button",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "onKeyDown",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Value of the selected RadioGroup button.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "boolean",
                      "structure": {}
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Select",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Select/Select.js"
            },
            "presets": [
              {
                "path": "src/Select/presets/0-default.jsx"
              }
            ]
          },
          "name": "Select",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Select",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2"
                      },
                      {
                        "uxpinPresetElementId": "3"
                      },
                      {
                        "uxpinPresetElementId": "4"
                      }
                    ]
                  }
                },
                "2": {
                  "name": "MenuItem",
                  "props": {
                    "children": "Ten",
                    "value": 10
                  }
                },
                "3": {
                  "name": "MenuItem",
                  "props": {
                    "children": "Twenty",
                    "value": 20
                  }
                },
                "4": {
                  "name": "MenuItem",
                  "props": {
                    "children": "Thirty",
                    "value": 30
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "If true, the width of the popover will automatically be set according to the items inside the\nmenu, otherwise it will be at least the width of the select input.",
              "isRequired": false,
              "name": "autoWidth",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The option elements to populate the select with.\nCan be some `MenuItem` when `native` is false and `option` when `native` is true.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the selected item is displayed even if its value is empty.\nYou can only use it when the `native` property is `false` (default).",
              "isRequired": false,
              "name": "displayEmpty",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The icon that displays the arrow.",
              "isRequired": false,
              "name": "IconComponent",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "An `Input` element; does not have to be a material-ui specific `Input`.",
              "isRequired": false,
              "name": "input",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Attributes applied to the `input` element.\nWhen `native` is `true`, the attributes are applied on the `select` element.",
              "isRequired": false,
              "name": "inputProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "MenuProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "If true, `value` must be an array and the menu will support multiple selections.",
              "isRequired": false,
              "name": "multiple",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the component will be using a native `select` element.",
              "isRequired": false,
              "name": "native",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Callback function fired when a menu item is selected.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Callback fired when the component requests to be closed.\nUse in controlled mode (see open).",
              "isRequired": false,
              "name": "onClose",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Callback fired when the component requests to be opened.\nUse in controlled mode (see open).",
              "isRequired": false,
              "name": "onOpen",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Control `select` open state.\nYou can only use it when the `native` property is `false` (default).",
              "isRequired": false,
              "name": "open",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Render the selected value.\nYou can only use it when the `native` property is `false` (default).",
              "isRequired": false,
              "name": "renderValue",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Properties applied to the clickable div element.",
              "isRequired": false,
              "name": "SelectDisplayProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The input value.\nThis property is required when the `native` property is `false` (default).",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "boolean",
                      "structure": {}
                    },
                    {
                      "name": "object",
                      "structure": {}
                    },
                    {
                      "name": "typedArray",
                      "structure": {
                        "memberType": {
                          "name": "union",
                          "structure": {
                            "elements": [
                              {
                                "name": "string",
                                "structure": {}
                              },
                              {
                                "name": "number",
                                "structure": {}
                              },
                              {
                                "name": "boolean",
                                "structure": {}
                              },
                              {
                                "name": "object",
                                "structure": {}
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Switch",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Switch/Switch.js"
            },
            "presets": [
              {
                "path": "src/Switch/presets/0-default.jsx"
              }
            ]
          },
          "name": "Switch",
          "presets": [
            {
              "elements": {
                "undefined": {
                  "name": "Switch",
                  "props": {}
                }
              },
              "name": "default"
            }
          ],
          "properties": [
            {
              "description": "If `true`, the component is checked.",
              "isRequired": false,
              "name": "checked",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The icon to display when the component is checked.",
              "isRequired": false,
              "name": "checkedIcon",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The color of the component. It supports those theme colors that make sense for this component.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "defaultChecked",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the switch will be disabled.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the ripple effect will be disabled.",
              "isRequired": false,
              "name": "disableRipple",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The icon to display when the component is unchecked.",
              "isRequired": false,
              "name": "icon",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "The id of the `input` element.",
              "isRequired": false,
              "name": "id",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Attributes applied to the `input` element.",
              "isRequired": false,
              "name": "inputProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Use that property to pass a ref callback to the native input component.",
              "isRequired": false,
              "name": "inputRef",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "func",
                      "structure": {}
                    },
                    {
                      "name": "object",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Callback fired when the state is changed.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The input component property `type`.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The value of the component.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "boolean",
                      "structure": {}
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/TextField",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/TextField/TextField.js"
            },
            "presets": [
              {
                "path": "src/TextField/presets/0-default.jsx"
              }
            ]
          },
          "name": "TextField",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "TextField",
                  "props": {
                    "fullWidth": true
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "This property helps users to fill forms faster, especially on mobile devices.\nThe name can be confusing, as it's more like an autofill.\nYou can learn more about it here:\nhttps://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill",
              "isRequired": false,
              "name": "autoComplete",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the input will be focused during the first mount.",
              "isRequired": false,
              "name": "autoFocus",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The default value of the `Input` element.",
              "isRequired": false,
              "name": "defaultValue",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, the input will be disabled.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the label will be displayed in an error state.",
              "isRequired": false,
              "name": "error",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "FormHelperTextProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the input will take up the full width of its container.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The helper text content.",
              "isRequired": false,
              "name": "helperText",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "The id of the `input` element.\nUse that property to make `label` and `helperText` accessible for screen readers.",
              "isRequired": false,
              "name": "id",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "InputLabelProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Properties applied to the `Input` element.",
              "isRequired": false,
              "name": "InputProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Attributes applied to the native `input` element.",
              "isRequired": false,
              "name": "inputProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Use that property to pass a ref callback to the native input component.",
              "isRequired": false,
              "name": "inputRef",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "func",
                      "structure": {}
                    },
                    {
                      "name": "object",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "The label content.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "If `dense` or `normal`, will adjust vertical spacing of this and contained components.",
              "isRequired": false,
              "name": "margin",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "none"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "dense"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "normal"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, a textarea element will be rendered instead of an input.",
              "isRequired": false,
              "name": "multiline",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Name attribute of the `input` element.",
              "isRequired": false,
              "name": "name",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onBlur",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Callback fired when the value is changed.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onFocus",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The short hint displayed in the input before the user enters a value.",
              "isRequired": false,
              "name": "placeholder",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the label is displayed as required and the input will be required.",
              "isRequired": false,
              "name": "required",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Number of rows to display when multiline option is set to true.",
              "isRequired": false,
              "name": "rows",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Maximum number of rows to display when multiline option is set to true.",
              "isRequired": false,
              "name": "rowsMax",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Render a `Select` element while passing the `Input` element to `Select` as `input` parameter.\nIf this option is set you must pass the options of the select as children.",
              "isRequired": false,
              "name": "select",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "SelectProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Type attribute of the `Input` element. It should be a valid HTML5 input type.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The value of the `Input` element, required for a controlled component.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "boolean",
                      "structure": {}
                    },
                    {
                      "name": "typedArray",
                      "structure": {
                        "memberType": {
                          "name": "union",
                          "structure": {
                            "elements": [
                              {
                                "name": "string",
                                "structure": {}
                              },
                              {
                                "name": "number",
                                "structure": {}
                              },
                              {
                                "name": "boolean",
                                "structure": {}
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The variant to use.",
              "isRequired": false,
              "name": "variant",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "standard"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "outlined"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "filled"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      ],
      "name": "Form"
    },
    {
      "components": [
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Avatar",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Avatar/Avatar.js"
            },
            "presets": [
              {
                "path": "src/Avatar/presets/0-default.jsx"
              }
            ]
          },
          "name": "Avatar",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Avatar",
                  "props": {
                    "children": "M"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Color of the background of the avatar. Visible unless there's an image inside of the circle.",
              "isRequired": false,
              "name": "backgroundShade",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "white"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "red"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "pink"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "purple"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "deepPurple"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "indigo"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "blue"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "lightBlue"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "cyan"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "teal"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "green"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "lightGreen"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "lime"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "yellow"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "amber"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "orange"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "deepOrange"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "brown"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "grey"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "blueGrey"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Hue of the background of the avatar. Visible unless there's an image inside of the circle.",
              "isRequired": false,
              "name": "backgroundHue",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "50"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "100"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "200"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "300"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "400"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "500"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "600"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "700"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "800"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "900"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "A100"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "A200"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "A400"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "A700"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Color of the content of the avatar. Visible unless there's an image inside of the circle.",
              "isRequired": false,
              "name": "contentShade",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "white"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "red"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "pink"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "purple"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "deepPurple"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "indigo"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "blue"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "lightBlue"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "cyan"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "teal"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "green"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "lightGreen"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "lime"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "yellow"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "amber"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "orange"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "deepOrange"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "brown"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "grey"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "blueGrey"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Hue of the content of the avatar. Visible unless there's an image inside of the circle.",
              "isRequired": false,
              "name": "contentHue",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "50"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "100"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "200"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "300"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "400"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "500"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "600"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "700"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "800"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "900"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "A100"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "A200"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "A400"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "A700"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Used in combination with `src` or `srcSet` to\nprovide an alt attribute for the rendered `img` element.",
              "isRequired": false,
              "name": "alt",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Used to render icon or text elements inside the Avatar.\n`src` and `alt` props will not be used and no `img` will\nbe rendered by default.\n\nThis can be an element, or just a string.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Attributes applied to the `img` element if the component\nis used to display an image.",
              "isRequired": false,
              "name": "imgProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The `sizes` attribute for the `img` element.",
              "isRequired": false,
              "name": "sizes",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The `src` attribute for the `img` element.",
              "isRequired": false,
              "name": "src",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The `srcSet` attribute for the `img` element.",
              "isRequired": false,
              "name": "srcSet",
              "type": {
                "name": "string",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Backdrop",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Backdrop/Backdrop.js"
            },
            "presets": [
              {
                "path": "src/Backdrop/presets/0-default.jsx"
              }
            ]
          },
          "name": "Backdrop",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Backdrop",
                  "props": {
                    "open": true
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the backdrop is invisible.\nIt can be used when rendering a popover or a custom select component.",
              "isRequired": false,
              "name": "invisible",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the backdrop is open.",
              "isRequired": false,
              "name": "open",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
              "isRequired": false,
              "name": "transitionDuration",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "shape",
                      "structure": {
                        "enter": {
                          "name": "number",
                          "structure": {}
                        },
                        "exit": {
                          "name": "number",
                          "structure": {}
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Badge",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Badge/Badge.js"
            },
            "presets": [
              {
                "path": "src/Badge/presets/0-default.jsx"
              }
            ]
          },
          "name": "Badge",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Badge",
                  "props": {
                    "badgeContent": 3,
                    "children": [
                      {
                        "uxpinPresetElementId": "2"
                      }
                    ],
                    "color": "primary"
                  }
                },
                "2": {
                  "name": "Icon",
                  "props": {
                    "children": "mail"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The content rendered within the badge.",
              "isRequired": false,
              "name": "badgeContent",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "The badge will be added relative to this node.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The color of the component. It supports those theme colors that make sense for this component.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "error"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, the badge will be invisible.",
              "isRequired": false,
              "name": "invisible",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Chip",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Chip/Chip.js"
            },
            "presets": [
              {
                "path": "src/Chip/presets/0-default.jsx"
              }
            ]
          },
          "name": "Chip",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Chip",
                  "props": {
                    "avatar": {
                      "uxpinPresetElementId": "1.1"
                    },
                    "label": "Clickable Deletable Chip"
                  }
                },
                "1.1": {
                  "name": "Avatar",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1.1"
                      }
                    ]
                  }
                },
                "1.1.1": {
                  "name": "Icon",
                  "props": {
                    "children": "face"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Avatar element.",
              "isRequired": false,
              "name": "avatar",
              "type": {
                "name": "element",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "If true, the chip will appear clickable, and will raise when pressed,\neven if the onClick property is not defined.\nIf false, the chip will not be clickable, even if onClick property is defined.\nThis can be used, for example,\nalong with the component property to indicate an anchor Chip is clickable.",
              "isRequired": false,
              "name": "clickable",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The color of the component. It supports those theme colors that make sense for this component.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Override the default delete icon element. Shown only if `onDelete` is set.",
              "isRequired": false,
              "name": "deleteIcon",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Icon element.",
              "isRequired": false,
              "name": "icon",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "The content of the label.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Callback function fired when the delete icon is clicked.\nIf set, the delete icon will be shown.",
              "isRequired": false,
              "name": "onDelete",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onKeyDown",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onKeyUp",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "tabIndex",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "string",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "The variant to use.",
              "isRequired": false,
              "name": "variant",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "outlined"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Collapse",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Collapse/Collapse.js"
            },
            "presets": [
              {
                "path": "src/Collapse/presets/0-default.jsx"
              }
            ]
          },
          "name": "Collapse",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Collapse",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "2"
                      },
                      {
                        "uxpinPresetElementId": "3"
                      }
                    ]
                  }
                },
                "2": {
                  "name": "Typography",
                  "props": {
                    "children": "Method:",
                    "paragraph": true
                  }
                },
                "3": {
                  "name": "Typography",
                  "props": {
                    "children": "Heat 1/2 cup of the broth in a pot until simmering, add saffron and set aside for 10 minutes.",
                    "paragraph": true
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The content node to be collapsed.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The height of the container when collapsed.",
              "isRequired": false,
              "name": "collapsedHeight",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the component will transition in.",
              "isRequired": false,
              "name": "in",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "onEnter",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "onEntered",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "onEntering",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "onExit",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "onExiting",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "theme",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.\n\nSet to 'auto' to automatically calculate transition time based on height.",
              "isRequired": false,
              "name": "timeout",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "shape",
                      "structure": {
                        "enter": {
                          "name": "number",
                          "structure": {}
                        },
                        "exit": {
                          "name": "number",
                          "structure": {}
                        }
                      }
                    },
                    {
                      "name": "union",
                      "structure": {
                        "elements": [
                          {
                            "name": "literal",
                            "structure": {
                              "value": "auto"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Paper",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Paper/Paper.js"
            },
            "presets": [
              {
                "path": "src/Paper/presets/0-default.jsx"
              }
            ]
          },
          "name": "Paper",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "Paper",
                  "props": {
                    "children": "Merge"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The content of the component.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Shadow depth, corresponds to `dp` in the spec.\nIt's accepting values between 0 and 24 inclusive.",
              "isRequired": false,
              "name": "elevation",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "If `true`, rounded corners are disabled.",
              "isRequired": false,
              "name": "square",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Custom Style Object",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "structure": {}
              }
            }
          ]
        }
      ],
      "name": "Content"
    },
    {
      "components": [
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/List",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/List/List.js"
            },
            "presets": [
              {
                "path": "src/List/presets/0-default.jsx"
              }
            ]
          },
          "name": "List",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "List",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1"
                      },
                      {
                        "uxpinPresetElementId": "1.2"
                      }
                    ],
                    "subheader": {
                      "uxpinPresetElementId": "1.3"
                    }
                  }
                },
                "1.1": {
                  "name": "ListItem",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1.1"
                      },
                      {
                        "uxpinPresetElementId": "1.1.2"
                      },
                      {
                        "uxpinPresetElementId": "1.1.3"
                      }
                    ]
                  }
                },
                "1.1.1": {
                  "name": "ListItemIcon",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1.1.1"
                      }
                    ]
                  }
                },
                "1.1.1.1": {
                  "name": "Icon",
                  "props": {
                    "children": "wifi"
                  }
                },
                "1.1.2": {
                  "name": "ListItemText",
                  "props": {
                    "primary": "Wi-Fi"
                  }
                },
                "1.1.3": {
                  "name": "ListItemSecondaryAction",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1.3.1"
                      }
                    ]
                  }
                },
                "1.1.3.1": {
                  "name": "Switch",
                  "props": {}
                },
                "1.2": {
                  "name": "ListItem",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.2.1"
                      },
                      {
                        "uxpinPresetElementId": "1.2.2"
                      },
                      {
                        "uxpinPresetElementId": "1.2.3"
                      }
                    ]
                  }
                },
                "1.2.1": {
                  "name": "ListItemIcon",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.2.1.1"
                      }
                    ]
                  }
                },
                "1.2.1.1": {
                  "name": "Icon",
                  "props": {
                    "children": "bluetooth"
                  }
                },
                "1.2.2": {
                  "name": "ListItemText",
                  "props": {
                    "primary": "Bluetooth"
                  }
                },
                "1.2.3": {
                  "name": "ListItemSecondaryAction",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.2.3.1"
                      }
                    ]
                  }
                },
                "1.2.3.1": {
                  "name": "Switch",
                  "props": {}
                },
                "1.3": {
                  "name": "ListSubheader",
                  "props": {
                    "children": "Settings"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The content of the component.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, compact vertical padding designed for keyboard and mouse input will be used for\nthe list and list items. The property is available to descendant components as the\n`dense` context.",
              "isRequired": false,
              "name": "dense",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, vertical padding will be removed from the list.",
              "isRequired": false,
              "name": "disablePadding",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The content of the subheader, normally `ListSubheader`.",
              "isRequired": false,
              "name": "subheader",
              "type": {
                "name": "node",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/ListItem",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/ListItem/ListItem.js"
            },
            "presets": [
              {
                "path": "src/ListItem/presets/0-default.jsx"
              }
            ]
          },
          "name": "ListItem",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "ListItem",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1"
                      },
                      {
                        "uxpinPresetElementId": "1.2"
                      }
                    ],
                    "label": "Active"
                  }
                },
                "1.1": {
                  "name": "Avatar",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1.1"
                      }
                    ]
                  }
                },
                "1.1.1": {
                  "name": "Icon",
                  "props": {
                    "children": "work"
                  }
                },
                "1.2": {
                  "name": "ListItemText",
                  "props": {
                    "primary": "Work",
                    "secondary": "Jan 7, 2014"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Defines the `align-items` style property.",
              "isRequired": false,
              "name": "alignItems",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "flex-start"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "center"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, the list item will be a button (using `ButtonBase`).",
              "isRequired": false,
              "name": "button",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The content of the component.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.\nBy default, it's a `li` when `button` is `false` and a `div` when `button` is `true`.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The container component used when a `ListItemSecondaryAction` is rendered.",
              "isRequired": false,
              "name": "ContainerComponent",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Properties applied to the container element when the component\nis used to display a `ListItemSecondaryAction`.",
              "isRequired": false,
              "name": "ContainerProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "If `true`, compact vertical padding designed for keyboard and mouse input will be used.",
              "isRequired": false,
              "name": "dense",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the list item will be disabled.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the left and right padding is removed.",
              "isRequired": false,
              "name": "disableGutters",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, a 1px light border is added to the bottom of the list item.",
              "isRequired": false,
              "name": "divider",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "focusVisibleClassName",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Use to apply selected styling.",
              "isRequired": false,
              "name": "selected",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/ListItemAvatar",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/ListItemAvatar/ListItemAvatar.js"
            },
            "presets": [
              {
                "path": "src/ListItemAvatar/presets/0-default.jsx"
              }
            ]
          },
          "name": "ListItemAvatar",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "ListItemAvatar",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1"
                      }
                    ],
                    "label": "Active"
                  }
                },
                "1.1": {
                  "name": "Avatar",
                  "props": {
                    "alt": "Remy Sharp",
                    "src": "https://pbs.twimg.com/profile_images/1072203920083116032/bsnMtLgG_bigger.jpg"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The content of the component – normally `Avatar`.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "element",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/ListItemIcon",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/ListItemIcon/ListItemIcon.js"
            },
            "presets": [
              {
                "path": "src/ListItemIcon/presets/0-default.jsx"
              }
            ]
          },
          "name": "ListItemIcon",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "ListItemIcon",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1"
                      }
                    ]
                  }
                },
                "1.1": {
                  "name": "Icon",
                  "props": {
                    "children": "inbox"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The content of the component, normally `Icon`, `SvgIcon`,\nor a `@material-ui/icons` SVG icon element.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/ListItemSecondaryAction",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/ListItemSecondaryAction/ListItemSecondaryAction.js"
            },
            "presets": [
              {
                "path": "src/ListItemSecondaryAction/presets/0-default.jsx"
              }
            ]
          },
          "name": "ListItemSecondaryAction",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "ListItemSecondaryAction",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "1.1"
                      }
                    ]
                  }
                },
                "1.1": {
                  "name": "Checkbox",
                  "props": {}
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The content of the component, normally an `IconButton` or selection control.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/ListItemText",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/ListItemText/ListItemText.js"
            },
            "presets": [
              {
                "path": "src/ListItemText/presets/0-default.jsx"
              }
            ]
          },
          "name": "ListItemText",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "ListItemText",
                  "props": {
                    "primary": "Brunch this weekend?"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Alias for the `primary` property.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the children won't be wrapped by a Typography component.\nThis can be useful to render an alternative Typography variant by wrapping\nthe `children` (or `primary`) text, and optional `secondary` text\nwith the Typography component.",
              "isRequired": false,
              "name": "disableTypography",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the children will be indented.\nThis should be used if there is no left avatar or left icon.",
              "isRequired": false,
              "name": "inset",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The main content element.",
              "isRequired": false,
              "name": "primary",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "These props will be forwarded to the primary typography component\n(as long as disableTypography is not `true`).",
              "isRequired": false,
              "name": "primaryTypographyProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The secondary content element.",
              "isRequired": false,
              "name": "secondary",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "These props will be forwarded to the secondary typography component\n(as long as disableTypography is not `true`).",
              "isRequired": false,
              "name": "secondaryTypographyProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "theme",
              "type": {
                "name": "object",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/ListSubheader",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/ListSubheader/ListSubheader.js"
            },
            "presets": [
              {
                "path": "src/ListSubheader/presets/0-default.jsx"
              }
            ]
          },
          "name": "ListSubheader",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "ListSubheader",
                  "props": {
                    "children": "Settings"
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "The content of the component.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The color of the component. It supports those theme colors that make sense for this component.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "inherit"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The component used for the root node.\nEither a string to use a DOM element or a component.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the List Subheader will not have gutters.",
              "isRequired": false,
              "name": "disableGutters",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the List Subheader will not stick to the top during scroll.",
              "isRequired": false,
              "name": "disableSticky",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, the List Subheader will be indented.",
              "isRequired": false,
              "name": "inset",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            }
          ]
        }
      ],
      "name": "List"
    },
    {
      "components": [
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/CircularProgress",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/CircularProgress/CircularProgress.js"
            },
            "presets": [
              {
                "path": "src/CircularProgress/presets/0-default.jsx"
              }
            ]
          },
          "name": "CircularProgress",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "CircularProgress",
                  "props": {
                    "size": 68
                  }
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The color of the component. It supports those theme colors that make sense for this component.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "inherit"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "If `true`, the shrink animation is disabled.\nThis only works if variant is `indeterminate`.",
              "isRequired": false,
              "name": "disableShrink",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The size of the circle.",
              "isRequired": false,
              "name": "size",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "string",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "The thickness of the circle.",
              "isRequired": false,
              "name": "thickness",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "The value of the progress indicator for the determinate and static variants.\nValue between 0 and 100.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "The variant to use.\nUse indeterminate when there is no progress value.",
              "isRequired": false,
              "name": "variant",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "determinate"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "indeterminate"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "static"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/LinearProgress",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/LinearProgress/LinearProgress.js"
            },
            "presets": [
              {
                "path": "src/LinearProgress/presets/0-default.jsx"
              }
            ]
          },
          "name": "LinearProgress",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "LinearProgress",
                  "props": {}
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "Override or extend the styles applied to the component.\nSee [CSS API](#css-api) below for more details.",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The color of the component. It supports those theme colors that make sense for this component.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "secondary"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The value of the progress indicator for the determinate and buffer variants.\nValue between 0 and 100.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "The value for the buffer variant.\nValue between 0 and 100.",
              "isRequired": false,
              "name": "valueBuffer",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "The variant to use.\nUse indeterminate or query when there is no progress value.",
              "isRequired": false,
              "name": "variant",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "determinate"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "indeterminate"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "buffer"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "query"
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      ],
      "name": "Progress"
    },
    {
      "components": [
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/CssBaseline",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/CssBaseline/CssBaseline.js"
            },
            "presets": [
              {
                "path": "src/CssBaseline/presets/0-default.jsx"
              }
            ]
          },
          "name": "CssBaseline",
          "presets": [
            {
              "elements": {
                "1": {
                  "name": "CssBaseline",
                  "props": {}
                }
              },
              "name": "default",
              "rootId": "1"
            }
          ],
          "properties": [
            {
              "description": "You can wrap a node.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "@ignore",
              "isRequired": false,
              "name": "classes",
              "type": {
                "name": "object",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Image",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Image/Image.js"
            },
            "presets": [
              {
                "path": "src/Image/presets/0-default.jsx"
              }
            ]
          },
          "name": "Image",
          "presets": [
            {
              "elements": {
                "undefined": {
                  "name": "Image",
                  "props": {
                    "alt": "Gdynia",
                    "height": "100%",
                    "objectFit": "cover",
                    "src": "http://uxpin.com/images/homepage/about-us/location-gdynia.jpg",
                    "width": "100%"
                  }
                }
              },
              "name": "default"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "alt",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "defaultValue": {
                "value": "100%"
              },
              "description": "",
              "isRequired": false,
              "name": "height",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "defaultValue": {
                "value": "100%"
              },
              "description": "",
              "isRequired": false,
              "name": "width",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "defaultValue": {
                "value": "cover"
              },
              "description": "",
              "isRequired": false,
              "name": "objectFit",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "fill"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "contain"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "cover"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "none"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "scale-down"
                      }
                    }
                  ]
                }
              }
            },
            {
              "defaultValue": {
                "value": "http://uxpin.com/images/homepage/about-us/location-gdynia.jpg"
              },
              "description": "",
              "isRequired": false,
              "name": "src",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "structure": {}
              }
            }
          ]
        }
      ],
      "name": "HTML Wrappers and Spacing"
    }
  ],
  "name": "Material Design UI",
  "vcs": {
    "branchName": "master",
    "commitHash": "5564ef5f97f18dac79527eaf91a9bdba09f57ae8"
  }
}